-- 8 MHz divider with 16MHz CPU
gen_count : process (Q2_Clock)
begin
	if (rising_edge(Q2_Clock)) then
		if prescaler_cpu = "100" then -- Generate 8Mhz reference clock by dividing by 5
			prescaler_cpu(2) <= '0';
			CPU_CLK_8pre <= not CPU_CLK_8pre;
		else
			prescaler_cpu <= prescaler_cpu + "1";
		end if;
	end if;
end process gen_count;	

gen_fall : process (Q2_Clock) -- Generate offset 8MHz
begin
	if (falling_edge(Q2_Clock)) then
		if prescaler_cpu = "010" then -- In position for a symmetrical shift
			CPU_CLK_F_pre <= not CPU_CLK_F_pre;
		end if;
	end if;
end process gen_fall;	

-- 8MHz 
gen_irq : process (CPU_CLK_8pre)
begin
	-- Generate periodic interrupt at 1000 Hz
	if rising_edge(CPU_CLK_8pre) then
		if prescaler_irq = 7999 then
			prescaler_irq <= (others => '0');
			speaker_pre <= not speaker_pre; -- Invert speaker clock
			if Reset_In = '1' then
				power_on <= not power_on;
			end if;
			IRQ7 <= Reset_In; -- Request interrupt if not resetting
			reset_db <= Reset_In;
		else
			if (FC0='1' and FC1='1' and FC2='1') then
				-- IACK recieved; clear interrupt requests
				IRQ7 <= '1';
			end if;
			prescaler_irq <= prescaler_irq + "1";
		end if;
	end if;
end process gen_irq;
--------------end 16 MHZ CLOCK----------------

end Behavioral;